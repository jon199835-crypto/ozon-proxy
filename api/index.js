export const config = {
  api: {
    bodyParser: false, // üö´ –æ—Ç–∫–ª—é—á–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
  },
};

export default async function handler(req, res) {
  const GAS_EXEC_URL = "https://script.google.com/macros/s/AKfycby6j2W1afW24CNOIm0N9001z5pU3yfNQYjI6BD5HkG63pHe9O_iO0XTn18l4rQSL6l6/exec";

  if (req.method !== "POST") {
    return res.status(200).send("‚úÖ Proxy alive (exec, raw body)");
  }

  try {
    // —á–∏—Ç–∞–µ–º "—Å—ã—Ä–æ–µ" —Ç–µ–ª–æ
    let rawBody = "";
    req.on("data", chunk => {
      rawBody += chunk;
    });

    req.on("end", async () => {
      console.log("üì¶ RAW BODY:", rawBody);

      const r = await fetch(GAS_EXEC_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: rawBody,        // —Ñ–æ—Ä–≤–∞—Ä–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
        redirect: "follow"
      });

      const text = await r.text();
      console.log("‚û°Ô∏è GAS response:", r.status, text);

      res.status(200).send("OK FORWARDED RAW");
    });
  } catch (err) {
    console.error("‚ùå Proxy error:", err);
    res.status(200).send("Proxy error: " + err.message);
  }
}
